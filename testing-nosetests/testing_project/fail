import django_nose.tools as nt


def otherfunc(a, b):
    nt.assert_equal(a, b)


def somefunc(x, y):
    otherfunc(x, y)


def otherfunc_multi(a, b):
    nt.assert_equal(a, b)


class TestFailing(object):
    def test_simple(self):
        def f():
            return 42

        def g():
            return 43

        nt.assert_equal(f(), g())

    def test_simple_multiline(self):
        otherfunc_multi(42, 6 * 9)

    def test_not(self):
        def f():
            return 42

        nt.assert_false(f())


class TestSpecialisedExplanations(object):
    def test_eq_text(self):
        nt.assert_equal('spam', 'eggs')

    def test_eq_similar_text(self):
        nt.assert_equal('foo 1 bar', 'foo 2 bar')

    def test_eq_multiline_text(self):
        nt.assert_equal('foo\nspam\nbar', 'foo\neggs\nbar')

    def test_eq_long_text(self):
        a = '1' * 10 + 'a' + '2' * 10
        b = '1' * 10 + 'b' + '2' * 10
        nt.assert_equal(a, b)

    def test_eq_list(self):
        nt.assert_equal([0, 1, 2], [0, 1, 3])

    def test_eq_list_long(self):
        a = [0] * 10 + [1] + [3] * 10
        b = [0] * 10 + [2] + [3] * 10
        nt.assert_equal(a, b)

    def test_eq_dict(self):
        nt.assert_equal({'a': 0, 'b': 1}, {'a': 0, 'b': 2})

    def test_eq_set(self):
        nt.assert_equal(set([0, 10, 11, 12]), set([0, 20, 21]))

    def test_eq_longer_list(self):
        nt.assert_equal([1, 2], [1, 2, 3])

    def test_in_list(self):
        nt.assert_in(1, [0, 2, 3, 4, 5])

    def test_not_in_text_multiline(self):
        text = 'some multiline\ntext\nwhich\nincludes foo\nand a\ntail'
        nt.assert_not_in('foo', text)

    def test_not_in_text_single(self):
        text = 'single foo line'
        nt.assert_not_in('foo', text)

    def test_not_in_text_single_long(self):
        text = 'head ' * 50 + 'foo ' + 'tail ' * 20
        nt.assert_not_in('foo', text)

    def test_not_in_text_single_long_term(self):
        text = 'head ' * 50 + 'f' * 70 + 'tail ' * 20
        nt.assert_not_in('f' * 70, text)


def test_attribute():
    class Foo(object):
        b = 1

    i = Foo()
    nt.assert_equal(i.b, 2)


def test_attribute_instance():
    class Foo(object):
        b = 1

    nt.assert_equal(Foo().b, 2)


def test_attribute_multiple():
    class Foo(object):
        b = 1

    class Bar(object):
        b = 2

    nt.assert_equal(Foo().b, Bar().b)


def globf(x):
    return x + 1


class TestMoreErrors:

    def test_startswith(self):
        s = "123"
        g = "456"
        nt.assert_true(s.startswith(g))

    def test_startswith_nested(self):
        def f():
            return "123"

        def g():
            return "456"

        nt.assert_true(f().startswith(g()))

    def test_global_func(self):
        nt.assert_true(isinstance(globf(42), float))

    def test_instance(self):
        self.x = 6 * 7
        nt.assert_true(self.x != 42)

    def test_compare(self):
        nt.assert_true(globf(10) < 5)
